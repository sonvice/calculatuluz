---
const initialPower = Astro.props.initialPower || '';

interface PriceData {
  currentPrice: number;
  lastUpdated: string;
  source: 'api' | 'cache' | 'historical';
}

// Valor por defecto
let priceData: PriceData = {
  currentPrice: 0.15,
  lastUpdated: new Date().toISOString(),
  source: 'historical',
};

if (import.meta.env.SSR) {
  try {
    const apiUrl = new URL('/api/prices', Astro.url.origin);
    const response = await fetch(apiUrl, {
      headers: { Accept: 'application/json' },
    });

    if (!response.ok) {
      throw new Error(`HTTP Error ${response.status}`);
    }

    const apiData = await response.json();
    priceData = {
      currentPrice: apiData.currentPrice,
      lastUpdated: apiData.lastUpdated,
      source: 'api',
    };
  } catch (error) {
    if (error instanceof Error) {
      console.error('[ERROR] API Fetch:', error.message);
    } else {
      console.error('[ERROR] API Fetch: Unknown error');
    }
    // Se mantiene el valor por defecto en caso de error.
  }
}
---

<div class="calculator">
  <div class="price-info">
    <h3>
      üí° Precio electricidad: <span class="highlight">
        {
          priceData.currentPrice.toLocaleString('es-ES', {
            style: 'currency',
            currency: 'EUR',
            minimumFractionDigits: 4,
            maximumFractionDigits: 4,
          })
        }
      </span>/kWh
    </h3>
    <p class="disclaimer">
      {
        priceData.source === 'historical'
          ? 'Datos hist√≥ricos - '
          : priceData.source === 'cache'
            ? 'Datos cacheados - '
            : ''
      }
      Actualizado: {new Date(priceData.lastUpdated).toLocaleTimeString('es-ES')}
    </p>
  </div>

  <form id="consumoForm">
    <div class="input-group">
      <label for="applianceSelect">Selecciona un electrodom√©stico:</label>
      <select id="applianceSelect" class="full-width custom-select">
        <option value="">-- Elegir de la lista --</option>
        <option value="50">üí° Bombilla LED (50W)</option>
        <option value="150">üíª Port√°til (150W)</option>
        <option value="300">üì∫ Televisor 50" (300W)</option>
        <option value="800">üç≤ Microondas (800W)</option>
        <option value="1200">üå™Ô∏è Secador pelo (1200W)</option>
        <option value="2000">üß∫ Lavadora (2000W)</option>
        <option value="custom">‚öôÔ∏è Personalizado</option>
      </select>
    </div>

    <div class="input-group">
      <label for="power">Potencia el√©ctrica:</label>
      <input
        type="number"
        id="power"
        placeholder="Ej: 1500 (vatios)"
        value={initialPower}
        step="50"
        min="0"
        class="full-width"
      />
      <small class="helper-text">M√°x. recomendado: 3500W</small>
    </div>

    <div class="input-group">
      <label for="hours">Horas de uso diario:</label>
      <input
        type="number"
        id="hours"
        placeholder="Ej: 2.5 horas"
        value="1"
        min="0.5"
        step="0.5"
        class="full-width"
      />
      <small class="helper-text">Usa punto decimal (ej: 1.5)</small>
    </div>

    <div class="actions">
      <button type="submit" class="calculate-btn">
        <span class="btn-text">üìä Calcular consumo</span>
        <span class="loading-spinner" aria-hidden="true"></span>
      </button>
      <button type="button" class="reset-btn">üîÑ Reiniciar</button>
    </div>
  </form>

  <div class="result">
    <h3>üìà Resultados:</h3>
    <div class="result-item">
      <span>Consumo diario:</span>
      <span id="kwh">0.00 kWh</span>
    </div>
    <div class="result-item">
      <span>Costo diario:</span>
      <span id="dailyCost">0.00 ‚Ç¨</span>
    </div>
    <div class="result-item">
      <span>Costo mensual:</span>
      <span id="monthlyCost">0.00 ‚Ç¨</span>
    </div>
    <div class="result-item">
      <span>Costo anual:</span>
      <span id="annualCost">0.00 ‚Ç¨</span>
    </div>
  </div>
</div>

<script define:vars={{ priceData }}>
  const formatter = new Intl.NumberFormat('es-ES', {
    style: 'currency',
    currency: 'EUR',
    minimumFractionDigits: 4,
  });

  const DOM = {
    applianceSelect: document.getElementById('applianceSelect'),
    powerInput: document.getElementById('power'),
    form: document.getElementById('consumoForm'),
    resultFields: {
      kwh: document.getElementById('kwh'),
      daily: document.getElementById('dailyCost'),
      monthly: document.getElementById('monthlyCost'),
      annual: document.getElementById('annualCost'),
    },
  };

  const CONFIG = {
    PRECIO_KWH: priceData.currentPrice,
    MAX_POWER: 3500,
    DECIMALS: 4,
  };

  DOM.applianceSelect.addEventListener('change', (e) => {
    const isCustom = e.target.value === 'custom';
    DOM.powerInput.disabled = !isCustom;
    if (!isCustom) DOM.powerInput.value = e.target.value;
  });

  DOM.form.addEventListener('submit', async (e) => {
    e.preventDefault();
    showLoading(true);

    const power = parseFloat(DOM.powerInput.value) || 0;
    const hours = parseFloat(document.getElementById('hours').value) || 0;

    if (power <= 0 || hours <= 0) {
      alert('‚ö†Ô∏è Valores deben ser mayores que cero');
      showLoading(false);
      return;
    }

    await new Promise((r) => setTimeout(r, 300));

    const kwh = (power * hours) / 1000;
    const daily = kwh * CONFIG.PRECIO_KWH;

    DOM.resultFields.kwh.textContent = `${kwh.toFixed(4)} kWh`;
    DOM.resultFields.daily.textContent = formatter.format(daily);
    DOM.resultFields.monthly.textContent = formatter.format(daily * 30);
    DOM.resultFields.annual.textContent = formatter.format(daily * 365);

    showLoading(false);
  });

  document.querySelector('.reset-btn').addEventListener('click', () => {
    DOM.form.reset();
    DOM.applianceSelect.value = '';
    DOM.powerInput.disabled = false;
    Object.values(DOM.resultFields).forEach((field) => {
      field.textContent = field.id === 'kwh' ? '0.00 kWh' : '0.00 ‚Ç¨';
    });
  });

  function showLoading(show) {
    const btn = document.querySelector('.calculate-btn');
    btn.disabled = show;
    btn.querySelector('.btn-text').style.visibility = show
      ? 'hidden'
      : 'visible';
    btn.querySelector('.loading-spinner').style.display = show
      ? 'inline-block'
      : 'none';
  }
</script>

<style>
  :root {
    --primary: #2196f3;
    --secondary: #27ae60;
    --background: #f8f9fa;
  }

  .calculator {
    max-width: 600px;
    margin: 2rem auto;
    padding: 2rem;
    background: white;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .price-info {
    text-align: center;
    padding: 1rem;
    margin-bottom: 2rem;
    background: var(--background);
    border-radius: 8px;
  }

  .highlight {
    color: var(--accent-500);
    font-weight: 600;
  }

  .disclaimer {
    font-size: 0.85rem;
    color: #666;
    margin-top: 0.5rem;
  }

  .input-group {
    margin-bottom: 1.5rem;
  }

  .full-width {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid #e2e8f0;
    border-radius: 6px;
    font-size: 1rem;
  }
  .custom-select {
    &,
    &::picker(select) {
      appearance: base-select;
    }
  }

  .helper-text {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.85rem;
    color: #666;
  }

  .actions {
    display: grid;
    gap: 1rem;
    margin-top: 2rem;
  }

  button {
    padding: 1rem;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: transform 0.1s;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  button:active {
    transform: scale(0.98);
  }

  .calculate-btn {
    background: var(--primary);
    color: white;
  }

  .reset-btn {
    background: #e2e8f0;
    color: #2d3748;
  }

  .result {
    margin-top: 2rem;
    padding: 1.5rem;
    background: var(--background);
    border-radius: 8px;
  }

  .result-item {
    display: flex;
    justify-content: space-between;
    margin: 0.5rem 0;
    padding: 0.75rem;
    background: white;
    border-radius: 6px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .loading-spinner {
    display: none;
    width: 1.2rem;
    height: 1.2rem;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @media (max-width: 480px) {
    .calculator {
      padding: 1.5rem;
      margin: 1rem;
    }

    .result-item {
      flex-direction: column;
      gap: 0.3rem;
    }
  }
</style>
